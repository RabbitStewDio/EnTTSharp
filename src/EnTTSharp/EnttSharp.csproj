<Project Sdk="Microsoft.NET.Sdk">

    <PropertyGroup>
        <GenerateAssemblyInfo>false</GenerateAssemblyInfo>

        <TargetFramework>netstandard2.1</TargetFramework>
        <Version>1.0.0</Version>
        <Authors>Thomas Morgner</Authors>
        <Company />
        <Description>EnTT-Sharp is a C# port of the EnTT C++ library.</Description>
        <PackageReleaseNotes>EnTT-Sharp is a C# port of the EnTT C++ library.</PackageReleaseNotes>
        <Copyright>Copyright 2020 Thomas Morgner</Copyright>
        <PackageLicenseUrl>https://github.com/tmorgner/Valion-RL/blob/develop/LICENSE.txt</PackageLicenseUrl>
        <PackageProjectUrl>https://github.com/tmorgner/Valion-RL</PackageProjectUrl>
        <RepositoryUrl>https://github.com/tmorgner/Valion-RL.git</RepositoryUrl>
        <RepositoryType>Git</RepositoryType>
        <PackageTags>rogue-like</PackageTags>
        <Nullable>enable</Nullable>
        <!-- <PackageIconUrl></PackageIconUrl> -->
    </PropertyGroup>

    <PropertyGroup Condition="'$(Configuration)|$(TargetFramework)|$(Platform)'=='Debug|netstandard1.0|AnyCPU'">
        <NoWarn>1701;1702;</NoWarn>
    </PropertyGroup>

    <PropertyGroup>
        <!-- For now ignore all documentation errors -->
        <NoWarn>1591;1712;1572;1573;</NoWarn>
        <RootNamespace>EnTTSharp</RootNamespace>
    </PropertyGroup>

    <ItemGroup>
        <DotNetCliToolReference Include="dotnet-t4-project-tool" Version="2.0.5" />
        <PackageReference Include="JetBrains.Annotations" Version="2020.1.0" />
        <PackageReference Include="Serilog" Version="2.9.0" />
        <PackageReference Include="System.ValueTuple" Version="4.5.0" />
        <TextTemplate Include="**\*.tt" />
    </ItemGroup>
    <ItemGroup>
        <None Remove="**/*.meta" />
    </ItemGroup>
    <ItemGroup>
      <Compile Update="Entities\ViewDelegates.Generated.cs">
        <DependentUpon>ViewDelegates.Generated.tt</DependentUpon>
      </Compile>
      <Compile Update="Entities\AdhocViews.Generated.cs">
        <DependentUpon>AdhocViews.Generated.tt</DependentUpon>
      </Compile>
      <Compile Update="Entities\EntityRegistryExtensions.Generated.cs">
        <DependentUpon>EntityRegistryExtensions.Generated.tt</DependentUpon>
      </Compile>
      <Compile Update="Entities\IEntityView.Generated.cs">
        <DependentUpon>IEntityView.Generated.tt</DependentUpon>
      </Compile>
      <Compile Update="Entities\IEntityViewFactory.Generated.cs">
        <DependentUpon>IEntityViewFactory.Generated.tt</DependentUpon>
      </Compile>
      <Compile Update="Entities\PersistentView.Generated.cs">
        <DependentUpon>PersistentView.Generated.tt</DependentUpon>
      </Compile>
      <Compile Update="Entities\Systems\EntitySystemBuilderWithContext.Generated.cs">
        <DependentUpon>EntitySystemBuilderWithContext.Generated.tt</DependentUpon>
      </Compile>
      <Compile Update="Entities\Systems\EntitySystemBuilderWithoutContext.Generated.cs">
        <DependentUpon>EntitySystemBuilderWithoutContext.Generated.tt</DependentUpon>
      </Compile>
    </ItemGroup>

    <Target Name="TextTemplateTransform" BeforeTargets="BeforeBuild" Inputs="@(TextTemplate)" Outputs="@(TextTemplate->'%(RelativeDir)%(Filename).cs')">
        <!-- 
            This is a crude hack to make Mono's T4 generator work at least somewhat sensibly
            when working with include files or relative paths. Microsoft's T4 used MSBuild
            syntax $(X) to reference environment variables, whilst Mono's version uses Environment
            variable syntax (%x%). 
 
            dotnet <tool> is also sensitive to the current working directory with local tools 
            and cannot be used when the working directory changes.
         -->
        <Exec WorkingDirectory="$(ProjectDir)" Command="dotnet t4 -v %(TextTemplate.Identity) -o %(TextTemplate.RelativeDir)%(TextTemplate.Filename).cs -I=%(TextTemplate.RelativeDir)" EnvironmentVariables="ProjectDir=$(ProjectDir)" />

        <!--
            The generator may have added new files that are not included in the list of compiled items.
            Those files would not be compiled in the same run that generated the files. So we have to
            add them to the compile collection manually after the fact. 

            But adding files that had been added already also triggers an error (DuplicateItems) and
            thus we have to first remove them before adding them again. Remove does nothing if the 
            item is not in the collection, and adding them afterwards ensures there is only one left.
        -->
        <ItemGroup>
           <Compile Remove="%(TextTemplate.RelativeDir)%(TextTemplate.Filename).cs" /> 
           <Compile Include="%(TextTemplate.RelativeDir)%(TextTemplate.Filename).cs" /> 
           <FileWrites Include="%(TextTemplate.RelativeDir)%(TextTemplate.Filename).cs" /> <!-- For clean to work properly -->
	</ItemGroup>
    </Target>

    <Target Name="TextTemplateClean" Inputs="@(TextTemplate)" Outputs="@(TextTemplate->'%(RelativeDir)%(Filename).cs_dummy')" AfterTargets="Clean">
        <Delete Files="@(Generated)" />
    </Target>

    <!--
  <ItemGroup>
    <PackageReference Include="Microsoft.CodeAnalysis.FxCopAnalyzers" Version="2.6.3">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
    </PackageReference>
  </ItemGroup>
-->
</Project>