<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ include file="../T4Includes/GeneratorHelpers.ttinclude" #><#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Globalization" #>

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using EnTTSharp.Entities.Helpers;
using EnTTSharp.Entities.Pools;

namespace EnTTSharp.Entities
{ 
<#
    foreach (var p in ProduceParameterVariants())
    {
        if (p.Count == 1)
        {
            continue;
        }
        
        var templateParamsLight = p.ToDeclaration();
#>
    public sealed class AdhocView<TEntityKey, <#= templateParamsLight #> > : AdhocMultiViewBase<TEntityKey>, IEntityView<TEntityKey, <#= templateParamsLight #>>
        where TEntityKey : IEntityKey
    {
        <#= p.ToCode("readonly IReadOnlyPool<TEntityKey, {1}> pool{1};", "\n        ") #>

        public AdhocView(IEntityPoolAccess<TEntityKey> registry) :
            base(registry, 
                 <#= p.ToCode("registry.GetPool<{1}>()", ",\n                 ") #>
        )
        {
            <#= p.ToCode("pool{1} = registry.GetPool<{1}>();", "\n            ") #>
        }


<#
        foreach (var x in p.ProduceParameterConfig())
        {
            var qualifier = x.ToQualifier();
#>
        public void Apply(ViewDelegates.Apply<#=qualifier #><TEntityKey, <#= templateParamsLight #> > bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallel(bulk);
                return;  
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOne(bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallel(ViewDelegates.Apply<#=qualifier #><TEntityKey, <#= templateParamsLight #> > bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                PersistentViewParallelism.PartitionAndRun(p, ek => ApplyOne(b, ek));
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyOne(ViewDelegates.Apply<#=qualifier #><TEntityKey, <#= templateParamsLight #> > bulk, TEntityKey ek)
        {
            // declare default values for each query
            <#= x.ToCode("{1} d{0} = default;", "\n            ") #>
            <#= x.ToCode("ref var r{0} = ref pool{1}.TryGetRef(ek, ref d{0}, out var s{0});", "\n            ") #>

            if (<#= x.ToCode("s{0}", " && \n                ") #>)
            {
                bulk(this, ek, <#= x.ToCode2("in r{0}", "ref r{0}", ", ") #>);
            }
        }

        public void ApplyWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContext<#=qualifier #><TEntityKey, TContext, <#= templateParamsLight #>> bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallelWithContext(context, bulk);
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOneWithContext(context, bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallelWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContext<#=qualifier #><TEntityKey, TContext, <#= templateParamsLight #>> bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                var c = context;
                PersistentViewParallelism.PartitionAndRun(p, ek => ApplyOneWithContext(c, b, ek));
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyOneWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContext<#=qualifier #><TEntityKey, TContext, <#= templateParamsLight #>> bulk, TEntityKey ek)
        {
            // declare default values for each query
            <#= x.ToCode("{1} d{0} = default;", "\n            ") #>
            <#= x.ToCode("ref var r{0} = ref pool{1}.TryGetRef(ek, ref d{0}, out var s{0});", "\n            ") #>

            if (<#= x.ToCode("s{0}", " && \n                ") #>)
            {
                bulk(this, context, ek, <#= x.ToCode2("in r{0}", "ref r{0}", ", ") #>);
            }
        }

<#
        }
#>
    }

<#
    }
#>
}