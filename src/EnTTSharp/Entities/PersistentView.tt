<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ include file="../T4Includes/GeneratorHelpers.ttinclude" #>

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EnttSharp.Entities
{
<#
    for (int p = 1; p <= MaxParameterCount; p += 1)
    {
        var templateParams = BuildTemplate(p);
        var templateParamsLight = BuildLightTemplate(p);
#>

    public sealed class PersistentView<TEntityKey, <#= templateParamsLight #>> : PersistentMultiViewBase<TEntityKey>, IPersistentEntityView<TEntityKey, <#= templateParamsLight #>>
        where TEntityKey: IEntityKey
    {
        <#= JoinGenericParams(p, "readonly Pools.Pool<TEntityKey, T{0}> pool{0};", "\n             ") #>

        public PersistentView(IEntityPoolAccess<TEntityKey> registry) :
            base(registry, 
                 <#= JoinGenericParams(p, "registry.GetPool<T{0}>()", ",\n             ") #>
            )
        {
            <#= JoinGenericParams(p, "pool{0} = registry.GetPool<T{0}>();", "\n             ") #>
        }

        public void Apply(ViewDelegates.Apply<TEntityKey, <#= templateParamsLight #>> bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this.GetEnumerator(), EstimatedSize);
            try
            {
                if (AllowParallelExecution)
                {
                    PersistentViewParallelism.PartitionAndRun(p, ek => ApplyOne(bulk, ek));
                }
                else
                {
                    foreach (var ek in p)
                    {
                        ApplyOne(bulk, ek);
                    }
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyOne(ViewDelegates.Apply<TEntityKey, <#= templateParamsLight #>> bulk, TEntityKey ek)
        {
            if (<#= JoinGenericParams(p, "pool{0}.TryGet(ek, out var c{0})", " && \n             ") #>)
            {
                bulk(this, ek, <#= JoinGenericParams(p, "in c{0}", ", ") #>);
            }
        }

        public void ApplyWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContext<TEntityKey, TContext, <#= templateParamsLight #>> bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this.GetEnumerator(), EstimatedSize);
            try
            {
                if (AllowParallelExecution)
                {
                    PersistentViewParallelism.PartitionAndRun(p, ek => ApplyOneWithContext(context, bulk, ek));
                }
                else
                {
                    foreach (var ek in p)
                    {
                        ApplyOneWithContext(context, bulk, ek);
                    }
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyOneWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContext<TEntityKey, TContext, <#= templateParamsLight #>> bulk, TEntityKey ek)
        {
            if (<#= JoinGenericParams(p, "pool{0}.TryGet(ek, out var c{0})", " && \n             ") #>)
            {
                bulk(this, context, ek, <#= JoinGenericParams(p, "in c{0}", ", ") #>);
            }
        }
    }
<#
    }
#>
}