

using System;

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
 
namespace EnTTSharp.Entities.Systems
{
    public readonly partial struct EntitySystemBuilderWithoutContext<TEntityKey>
    {

        public Action CreateSystem<T1>(ViewDelegates.Apply<TEntityKey, T1> action)
        {
            var view = reg.PersistentView<T1>();
            view.AllowParallelExecution = allowParallel;

            void Act()
            {
                view.Apply(action);
            }

            return Act;
        }

        public Action CreateSystem<T1, T2>(ViewDelegates.Apply<TEntityKey, T1, T2> action)
        {
            var view = reg.PersistentView<T1, T2>();
            view.AllowParallelExecution = allowParallel;

            void Act()
            {
                view.Apply(action);
            }

            return Act;
        }

        public Action CreateSystem<T1, T2, T3>(ViewDelegates.Apply<TEntityKey, T1, T2, T3> action)
        {
            var view = reg.PersistentView<T1, T2, T3>();
            view.AllowParallelExecution = allowParallel;

            void Act()
            {
                view.Apply(action);
            }

            return Act;
        }

        public Action CreateSystem<T1, T2, T3, T4>(ViewDelegates.Apply<TEntityKey, T1, T2, T3, T4> action)
        {
            var view = reg.PersistentView<T1, T2, T3, T4>();
            view.AllowParallelExecution = allowParallel;

            void Act()
            {
                view.Apply(action);
            }

            return Act;
        }

        public Action CreateSystem<T1, T2, T3, T4, T5>(ViewDelegates.Apply<TEntityKey, T1, T2, T3, T4, T5> action)
        {
            var view = reg.PersistentView<T1, T2, T3, T4, T5>();
            view.AllowParallelExecution = allowParallel;

            void Act()
            {
                view.Apply(action);
            }

            return Act;
        }

        public Action CreateSystem<T1, T2, T3, T4, T5, T6>(ViewDelegates.Apply<TEntityKey, T1, T2, T3, T4, T5, T6> action)
        {
            var view = reg.PersistentView<T1, T2, T3, T4, T5, T6>();
            view.AllowParallelExecution = allowParallel;

            void Act()
            {
                view.Apply(action);
            }

            return Act;
        }

        public Action CreateSystem<T1, T2, T3, T4, T5, T6, T7>(ViewDelegates.Apply<TEntityKey, T1, T2, T3, T4, T5, T6, T7> action)
        {
            var view = reg.PersistentView<T1, T2, T3, T4, T5, T6, T7>();
            view.AllowParallelExecution = allowParallel;

            void Act()
            {
                view.Apply(action);
            }

            return Act;
        }

    }
}